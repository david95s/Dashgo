import Head from 'next/head';
import {
  Flex,
  Button,
  Stack,
  Input as ChakraInput
} from "@chakra-ui/react";
import { Input } from '../components/Form/Input';

import { SubmitHandler, useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';


type SignInFormData = {
  email: string;
  password: string;
}


//Esquema de validação;
const signInformSchema = yup.object().shape({
  email: yup.string().required("Email é obrigatório").email("Email inválido"),
  password: yup.string().required("Senha é obrigatório"),
});


export default function SignIn() {

  /*
    Passando yupResolver como parametro
    EU NÃO preciso sair validando campo a 
    campo com => {  required: "Senha é obrigatório" }
  */
  const { register, handleSubmit, formState } = useForm({
    resolver: yupResolver(signInformSchema),
  });

  const { errors } = formState;

  const handleSignIn: SubmitHandler<SignInFormData> = async (values) => {
    await new Promise(resolve => setTimeout(resolve, 2000));
    console.log(values);
  }


  return (
    <div>
      <Head>
        <title>Dashgo</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Flex 
        w="100vw" 
        h="100vh" 
        align="center" 
        justify="center"
      >
        <Flex 
          as="form"
          w="100%"
          maxW={ 360 }
          bg="gray.800"
          p="8"
          borderRadius="8"
          flexDirection="column"
          onSubmit={handleSubmit(handleSignIn)}
        >
          <Stack spacing="4">
            <Input 
              label="E-mail"
              name="email"
              type="email"
              unikId="emailLogin"
              error={errors?.email}
              {...register("email")}
            />
            <Input 
              label="Senha"
              name="password"
              type="password"
              unikId="passwordLogin"
              error={errors?.password}
              {...register("password")}
            />

          </Stack>
          <Button 
            type="submit" 
            mt="6"
            colorScheme="pink"
            size="lg"
            isLoading={formState.isSubmitting}
          >Entrar</Button>
        </Flex>  
      </Flex>
    </div>
  )
}
